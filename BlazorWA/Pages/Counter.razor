@page "/counter"

@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWA.Models
@using System.Text
@using System.Text.Json

<h1>Create order</h1>

<EditForm Model="@_order" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>
        Starting point:
        <InputText id="startingPoint" @bind-Value="_order.StartingPoint" />
    </label>
    <label>
        Destination point:
        <InputText id="destinationPoint" @bind-Value="_order.DestinationPoint" />
    </label>
    <label>
        Type of car:
        <InputText id="typeOfCar" @bind-Value="_order.TypeOfCar" />
    </label>
    <label>
        Amount of seats:
        <InputNumber id="amountOfSeats" @bind-Value="_order.AmountOfSeats" />
    </label>
    @* <label> *@
    @*     Amount of seats: *@
    @*     <InputSelect @bind-Value="_order.AmountOfSeats"> *@
    @*         <option default value="1">1</option> *@
    @*         <option value="2">2</option> *@
    @*         <option value="3">3</option> *@
    @*         <option value="4">4</option> *@
    @*     </InputSelect> *@
    @* </label> *@

    <button type="submit">Submit</button>
</EditForm>

@code {
    string url = "https://localhost:5001/notification";
    HubConnection _connection;
    private readonly HttpClient _httpClient = new HttpClient();
    private Order _order = new Order {CustomerId = 1};

    private async void HandleValidSubmit()
    {
        // serializez with first capital hour
        string serializedOrder = System.Text.Json.JsonSerializer.Serialize(_order);
        Console.WriteLine(serializedOrder);
        await _connection.SendAsync("CreateOrder", serializedOrder);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", "Initialized");
        await ConnectToServer();
        await _connection.SendAsync("SendNotification");
    }

    private async Task ConnectToServer()
    {
        await JS.InvokeVoidAsync("console.log", "Connected to SignalR");
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();

        _connection.Closed += async (s) =>
        {
            await _connection.StartAsync();
        };
    }
}