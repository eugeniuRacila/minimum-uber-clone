@page "/"

@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWA.Models

<h1>Welcome to SignalR with Blazor</h1>
@* <button class="btn btn-success" @onclick="async () => await ConnectToServer()">Connect</button> *@
<h3>Connected to SignalR? @connectionStatus</h3>
<div class="row">
    <div class="col-4">
        @foreach (var item in notifications)
        {
            <div class="row">
                <h4>@item</h4>
            </div>
        }
    </div>
</div>

@* <button @onclick="Send" disabled="@(!isConnected)">Test SignalR</button> *@
@* <br> *@
@* <button @onclick="GetOrders" disabled="@(!isConnected)">GetOrders</button> *@

<hr>

<h3>Orders</h3>
<table class="table">
  <thead>
    <tr>
      <th scope="col">CustomerId</th>
      <th scope="col">DriverId</th>
      <th scope="col">StartingPoint</th>
      <th scope="col">DestinationPoint</th>
      <th scope="col">TypeOfCar</th>
      <th scope="col">AmountOfSeats</th>
    </tr>
  </thead>
  <tbody>
      @foreach (var order in _orders)
      {
          <tr>
              <td>@order.CustomerId</td>
              <td>@order.DriverId</td>
              <td>@order.StartingPoint</td>
              <td>@order.DestinationPoint</td>
              <td>@order.TypeOfCar</td>
              <td>@order.AmountOfSeats</td>
          </tr>
      }
  </tbody>
</table>

@code {
    string url = "https://localhost:5001/notification";

    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Disconnected";

    List<string> notifications = new List<string>();
    private IList<Order> _orders = new List<Order>();
    
    Task Send() =>
        _connection.SendAsync("SendNotify", "test");
    
    Task GetOrders() =>
        _connection.SendAsync("SendNotification");

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", "Initialized");
        await ConnectToServer();
        await _connection.SendAsync("SendNotification");
    }

    private async Task ConnectToServer()
    {
        await JS.InvokeVoidAsync("console.log", "Connected to SignalR");
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string>("notify", m =>
        {
            notifications.Add(m);
            StateHasChanged();
        });

        _connection.On<string>("notification",  receivedOrders =>
        {
            _orders = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<Order>>(receivedOrders);
            StateHasChanged();
        });
    }
}