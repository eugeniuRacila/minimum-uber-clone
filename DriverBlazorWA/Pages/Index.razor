@page "/"

@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client
@using DriverBlazorWA.Models

<h1>Driver BlazorWA</h1>

<h3>Connected to SignalR? @connectionStatus</h3>

<hr>

<h3>Orders</h3>
<table class="table">
  <thead>
    <tr>
      <th scope="col">CustomerId</th>
      <th scope="col">DriverId</th>
      <th scope="col">StartingPoint</th>
      <th scope="col">DestinationPoint</th>
      <th scope="col">TypeOfCar</th>
      <th scope="col">AmountOfSeats</th>
    </tr>
  </thead>
  <tbody>
      @foreach (var order in _orders)
      {
          <tr>
              <td>@order.CustomerId</td>
              <td>@order.DriverId</td>
              <td>@order.StartingPoint</td>
              <td>@order.DestinationPoint</td>
              <td>@order.TypeOfCar</td>
              <td>@order.AmountOfSeats</td>
              <td><button @onclick="TakeOrder">Take order</button></td>
          </tr>
      }
  </tbody>
</table>

@code {
    string url = "https://localhost:5002/orders";

    HubConnection _connection;
    string connectionStatus = "Disconnected";
    
    private IList<Order> _orders = new List<Order>();
    
    Task Send() =>
        _connection.SendAsync("SendNotify", "test");
    
    Task GetOrders() =>
        _connection.SendAsync("SendNotification");

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", "Initialized");
        await ConnectToServer();
        await _connection.SendAsync("GetOrders");
    }

    private async Task TakeOrder()
    {
        await _connection.SendAsync("TakeOrder", 1);
    }

    private async Task ConnectToServer()
    {
        await JS.InvokeVoidAsync("console.log", "Connected to SignalR");
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        connectionStatus = "Connected";

        _connection.Closed += async (s) =>
        {
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
        };

        _connection.On<string>("receiveOrders",  receivedOrders =>
        {
            _orders = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<Order>>(receivedOrders);
            StateHasChanged();
        });
    }
}